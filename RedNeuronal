using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Redes_Neuronales_2
{
    public class Class1
    {
    }

   
    public class Neuron
    {

        public double[] pesos
        {
            get
            {
                return pesos;
            }
            set
            {
                pesos = value;
            }
        }

        public double [] entradas
        {
            get
            {
                return entradas;
            }
            set
            {
                entradas = value;
            }
        }
        double activacionu;
        //entradas
        //double [] entradas;
        //pesos
        //double [] pesos;
        //error de cada nodo
        double errorNodo;
        //funcion activacion
        static Sigmoide sigmoide;
        //cuantas entradas y salidas
        public Neuron(int nentradas)
        {
            pesos = new double[nentradas];
            entradas = new double[nentradas];
            sigmoide = new Sigmoide();
            errorNodo = 0;
        }
        public void activacion()
        {
            double suma = 0;
            for (int i = 0; i < entradas.Length; i++) {
                suma += entradas[i] * pesos[i];
            }
            activacionu = sigmoide.funcion(suma);
        }


        public void verEntradas() {
            Console.WriteLine("**********Entradas**************");
            for (int i = 0; i < entradas.Length; i++) {
                Console.WriteLine(entradas[i]);
            }
        }


        public void verPesos()
        {
            Console.WriteLine("**********Pesos**************");
            for (int i = 0; i < pesos.Length; i++)
            {
                Console.WriteLine(pesos[i]);
            }
        }
        public double getActivacion()
        {
            return (activacionu);
        }
        public void verActivacion()
        {
            Console.WriteLine("************Activacion**************");
            Console.WriteLine("" + activacionu);
        }
        public double getError()
        {
            return (errorNodo);
        }
        public void setError(double error)
        {
            errorNodo = error;
        }

    }//End Neuron class

    public class RedNeuronal
    {
        //neurona para dos capas
        int nodosCapaK;
        int entCapak;
        int nodosCapaJ;
        int entCapaj;
        double L = 0.5;//factor de aprendizaje
        double[] entradas;

        Neuron[] neuronK; 
        Neuron[] neuronJ;

        static double balance = -1;

        public double x { get; private set; }

        //static double capaI[] = {1, 1, balance}
        //static double [] errorCapaK

        public RedNeuronal(int nodosCapaK, int nodosCapaJ, int entCapak, int entCapaj)
        {
            this.nodosCapaK = nodosCapaK;
            this.nodosCapaJ = nodosCapaJ;
            this.entCapak = entCapak;
            this.entCapaj = entCapaj;
        }

        public void crearRed()
        {
            //crea la capak
            neuronK = new Neuron[nodosCapaK];
            for (int k = 0; k < nodosCapaK; k++)
            {
                neuronK[k] = new Neuron(entCapak);
            }
            //crea la capaj
            neuronJ = new Neuron[nodosCapaJ];
            for (int j = 0; j < nodosCapaJ; j++)
            {
                neuronJ[j] = new Neuron(entCapaj);
            }
        }
        public void inicializaPesos()
        {
            //capa k
            Random random = new Random();

            for (int k = 0; k < nodosCapaK; k++)
            {
                for (int i = 0; i < entCapak; i++)
                {
                    var rand = random.Next(0, 1);

                    neuronK[k].pesos[i] = rand;
                }
            }
            //capa j
            for (int j = 0; j < nodosCapaJ; j++)
            {
                for (int i = 0; i < entCapak; i++)
                {
                    var rand = random.Next(0, 1);

                    neuronK[j].pesos[i] = rand;
                }
            }
        }//inicializa pesos

        public void entradasJ(double[] capaI)
        {
            //Inicializa Entradas Nodos J
            for (int j = 0; j < nodosCapaJ; j++)
            {
                for (int i = 0; i < capaI.Length; i++)
                {
                    neuronJ[j].entradas[i] = capaI[i];
                }
            }
        }//entradasJ
        public void activacionJ()
        {
            for (int j = 0; j < nodosCapaJ; j++)
            {
                neuronJ[j].activacion();
            }
        }//activacionJ
        public void activacionK()
        {
            for (int k = 0; k < nodosCapaK; k++)
            {
                neuronK[k].activacion();
            }
        }//activacionJ

        public void entradasK()
        {
            //Inicializa Entradas Nodos K
            
            for (int k = 0; k < nodosCapaK; k++)
            {
                int j;
                for (j = 0; j < nodosCapaJ; j++)
                {
                    neuronK[k].entradas[j] = neuronJ[j].getActivacion();
                }
                neuronK[k].entradas[j] = balance;
            }
        }//entradasJ

        public void errorCapaK(ref double [][] aprender, int epoca)
        {
            double errorl = 0;

            for (int k = 0; k < nodosCapaK; k++)
            {
                
                errorl = (aprender[k][epoca] - neuronK[k].getActivacion()) * neuronK[k].getActivacion() * (1 - neuronK[k].getActivacion());
               neuronK[k].setError(errorl);
            }
        }//errorCapaK

        public void pesos_JK() {
            for (int k = 0; k < nodosCapaK; k++)
            {
                for (int i = 0; i < entCapak; i++)
                    neuronK[k].pesos[i] += (L * neuronK[k].getError() * neuronK[k].entradas[i]);

            }
        }
        public void errorCapaJ()
        {
            double suma; double errj;
            for (int j = 0; j < nodosCapaJ; j++)
            {
                suma = 0;
                for (int k = 0; k < nodosCapaK; k++)
                {
                    suma += (neuronK[k].getError() * neuronK[k].pesos[j]);
                }

                errj = (neuronJ[j].getActivacion() * (1 - neuronJ[j].getActivacion()) * suma);
                neuronJ[j].setError(errj);
            }
        }//error CapaJ}
        public void pesos_IJ()
        {
            for (int j = 0; j < nodosCapaJ; j++)
            {
                for (int i = 0; i < entCapaj; i++)
                {
                  neuronJ[j].pesos[i] += L * neuronJ[j].getError() * neuronJ[j].entradas[i];
                }
            }
        }
        public double getErrorK()
        {
            double sumae = 0;
            for (int j = 0; j < nodosCapaK; j++)
            {
                sumae += neuronK[j].getError();
            }
            return (Math.Abs(sumae));
        }
        public double getActivationk(int neuron)
        {
            if (neuronK[neuron].getActivacion() >= 0.5)
                return (1);
            else
                return (0);
        }
        public void verPesos_IJ()
        {
            Console.WriteLine("*********actualiza Pesos_IJ**********");
            for (int j = 0; j < nodosCapaJ; j++)
            {
                neuronJ[j].verPesos();
            }
        }

        public void verPesos_JK()
        {
            Console.WriteLine("*********actualiza Pesos_IJ**********");
            for (int k = 0; k < nodosCapaK; k++)
            {
                neuronK[k].verPesos();
            }
        }
    }
    public class RedNeuronalTest
    {
        static int nodosk = 4;
        static int nodosj = 5;
        static RedNeuronal redNeuronal = new RedNeuronal(nodosk, nodosj ,6,8);
        static double balance = 1;

        static double [][] capaI = {new double [] {1,1,1,0,1,1,1,balance},
                                    new double [] {1,0,0,0,0,0,1,balance},
                                    new double [] {1,1,0,1,1,1,0,balance},
                                    new double [] {1,1,0,1,0,1,1,balance},
                                    new double [] {1,0,1,1,0,0,1,balance},
                                    new double [] {0,1,1,1,0,1,1,balance},
                                    new double [] {0,1,1,1,1,1,1,balance},
                                    new double [] {1,1,0,0,0,0,1,balance},
                                    new double [] {1,1,1,1,0,1,1,balance}};

        static double[][] aprender = {new double [] {0,0,0,0,0,0,0,0,1,1},
                                    new double [] {0,0,0,0,1,1,1,1,0,0},
                                    new double [] {0,0,1,1,0,0,1,1,0,0},
                                    new double [] {0,1,0,1,0,1,0,1,0,1} };
        public static void main()
        {
            redNeuronal.crearRed();
            redNeuronal.inicializaPesos();

            int n = 6000;
            int i = 0;
            int epoca;
            double error;
            int k = 0;
            Boolean noigual = false;
            while (i < capaI.Length && k < n)
            {
                epoca = i;
                if (i == 0)
                    Console.WriteLine("epoca" + epoca + "*******Iteracion*********");
                for (int c = 0; c < 7; c++) {
                    Console.WriteLine(" " + Math.Round(capaI[epoca][c]) + ",");
                }
                Console.WriteLine("Aprender");
                for (int c = 0; c < nodosk; c++)
                {
                    Console.WriteLine(" " + Math.Round(aprender[c][epoca]) + ",");
                }
                Console.WriteLine("Salida");
                redNeuronal.entradasJ(capaI[epoca]);
                redNeuronal.activacionJ();
                redNeuronal.entradasK();
                redNeuronal.activacionK();

                redNeuronal.errorCapaK(ref aprender, epoca);

                for (int c = 0; c < nodosk; c++)
                {
                    Console.WriteLine(" " + Math.Round(redNeuronal.getActivationk(c)) + ",");
                }
            //convierte Binario a Decimal
            double dec= 0;
                int t = 0;
                for (int c = nodosk - 1; c >= 0; c--)
                {
                    dec += redNeuronal.getActivationk(c) * Math.Pow(2, t);
                    t++;
                }
                    Console.WriteLine("Decimal " + dec);
                noigual = false;
                //si cada uno de los nodos k aprendieron bien
                for (int c=0; c < nodosk; c++)
                {
                    if (redNeuronal.getActivationk(c) == aprender[c][epoca])
                    { } else
                    {
                        noigual = true;
                                        }
                }
                if (noigual)
                {
                    i = -1;
                    redNeuronal.pesos_JK();
                    redNeuronal.errorCapaJ();
                    redNeuronal.pesos_IJ();
                }
                i++;
                k++;

            }//while
            redNeuronal.verPesos_IJ();
            redNeuronal.verPesos_JK();
    }

} 
    public class Sigmoide
    {
        double e;
        double p;
        public Sigmoide(){
            e = Math.E; p = 1;}
        public double funcion(double a)
        {
            return (1 / (1 + Math.Pow(e, -a / p)));
        }
    }//end sigmoide Class
}//end namespace
